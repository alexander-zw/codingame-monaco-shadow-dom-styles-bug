# Below is a Yarn patch that would fix the issue with @codingame/monaco-vscode-api not including CSS in shadow DOMs properly.
# It is not used, just here to demonstrate how it could be done.
diff --git a/external/rollup-plugin-styles/dist/runtime/inject-css.js b/external/rollup-plugin-styles/dist/runtime/inject-css.js
index 2aee8b83998654e96db7d0b4b338869d7c3fbf70..774dafeea2e3c11449723f3ab98acaad10583e42 100644
--- a/external/rollup-plugin-styles/dist/runtime/inject-css.js
+++ b/external/rollup-plugin-styles/dist/runtime/inject-css.js
@@ -1,2 +1,17 @@
-var e=[],t=[];function n(n,r){if(n&&"undefined"!=typeof document){var a,s=!0===r.prepend?"prepend":"append",d=!0===r.singleTag,i="string"==typeof r.container?document.querySelector(r.container):document.getElementsByTagName("head")[0];if(d){var u=e.indexOf(i);-1===u&&(u=e.push(i)-1,t[u]={}),a=t[u]&&t[u][s]?t[u][s]:t[u][s]=c();}else a=c();65279===n.charCodeAt(0)&&(n=n.substring(1)),a.styleSheet?a.styleSheet.cssText+=n:a.appendChild(document.createTextNode(n));}function c(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),r.attributes)for(var t=( Object.keys(r.attributes)),n=0;n<t.length;n++)e.setAttribute(t[n],r.attributes[t[n]]);var a="prepend"===s?"afterbegin":"beforeend";return i.insertAdjacentElement(a,e),e}}
+var e=[],t=[];function n(n,r){if(n&&"undefined"!=typeof document){var a,s=!0===r.prepend?"prepend":"append",d=!0===r.singleTag,i="string"==typeof r.container?document.querySelector(r.container):document.getElementsByTagName("head")[0];if(d){var u=e.indexOf(i);-1===u&&(u=e.push(i)-1,t[u]={}),a=t[u]&&t[u][s]?t[u][s]:t[u][s]=c();}else a=c();65279===n.charCodeAt(0)&&(n=n.substring(1)),a.styleSheet?a.styleSheet.cssText+=n:a.appendChild(document.createTextNode(n));}function c(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),r.attributes)for(var t=( Object.keys(r.attributes)),n=0;n<t.length;n++)e.setAttribute(t[n],r.attributes[t[n]]);var a="prepend"===s?"afterbegin":"beforeend";return i.insertAdjacentElement(a,e),e}
+// The new way Codingame Monaco 0.51 injects styles always puts it into the head, so it breaks shadow DOM styles. Add this to also inject it into each component's shadow DOM when loaded.
+function addStyleTagToShadowDom(selector) {
+  const style = document.createElement("style");
+  style.setAttribute("type", "text/css");
+  style.textContent = n;
+  style.classList.add("monaco-styles-fix-for-shadow-dom");
+  document.querySelector(selector).shadowRoot.append(style);
+}
+window.customElements.whenDefined("my-custom-element-for-shadow-dom").then(() => {
+  addStyleTagToShadowDom("my-custom-element-for-shadow-dom");
+});
+}
 export { n as default };